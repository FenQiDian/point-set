// Code generated by mockery v2.9.4. DO NOT EDIT.

package base

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockSession is an autogenerated mock type for the ISession type
type MockSession struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockSession) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConv provides a mock function with given fields:
func (_m *MockSession) GetConv() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// Recv provides a mock function with given fields: buffer, extChan, deadline
func (_m *MockSession) Recv(buffer []byte, extChan chan interface{}, deadline time.Time) (int, interface{}, error) {
	ret := _m.Called(buffer, extChan, deadline)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte, chan interface{}, time.Time) int); ok {
		r0 = rf(buffer, extChan, deadline)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 interface{}
	if rf, ok := ret.Get(1).(func([]byte, chan interface{}, time.Time) interface{}); ok {
		r1 = rf(buffer, extChan, deadline)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func([]byte, chan interface{}, time.Time) error); ok {
		r2 = rf(buffer, extChan, deadline)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Send provides a mock function with given fields: buffer, deadline
func (_m *MockSession) Send(buffer []byte, deadline time.Time) (int, error) {
	ret := _m.Called(buffer, deadline)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte, time.Time) int); ok {
		r0 = rf(buffer, deadline)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, time.Time) error); ok {
		r1 = rf(buffer, deadline)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendBatch provides a mock function with given fields: buffers, deadline
func (_m *MockSession) SendBatch(buffers [][]byte, deadline time.Time) (int, error) {
	ret := _m.Called(buffers, deadline)

	var r0 int
	if rf, ok := ret.Get(0).(func([][]byte, time.Time) int); ok {
		r0 = rf(buffers, deadline)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([][]byte, time.Time) error); ok {
		r1 = rf(buffers, deadline)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
